<?xml version="1.0" encoding="UTF-8"?>

<project name="mtbvang"
         default="default"
         phingVersion="2.7.0"
         description="Test and build the puppet module. Note all test related targets need to be run from within the vagrant virtual machine.">

	<property environment="env" />
	<property name="build.dir" value="${project.basedir}" />

	<property name="image.version" value="14.04" />
	<property name="image.name" value="ubuntu-vagrant" />

	<property name="option.localtime"
	          value="/usr/share/zoneinfo/Europe/Copenhagen" />

	<property name="test.pass.code" value="0" />

	<target name="default"
	        description="Prints out available targets in this project.">
		<exec command="phing -l" passthru="true" />
		<echo msg="testing=${testing}" />
	</target>

	<target name="build-init" description="Initialization tasks">
		<mkdir dir="build" />
		<available file="build/modules" type="dir" property="modules.exists" />
	</target>

	<target name="build-clean" description="Removes the build dir.">
		<delete dir="build" />
	</target>


	<!-- Smoke test targets -->
	<property name="option.puppet.options" value="--verbose" />
	<property name="option.module.path" value="modules" />
	<property name="option.test.manifest" value="tests/init.pp" />
	<property name="option.apply.manifest" value="manifests/site.pp" />


	<property name="test.command"
	          value="sudo puppet apply ${option.puppet.options} --modulepath=${option.module.path} ${option.test.manifest} " />
	<echo message="test.command: ${test.command}" />
	<property name="apply.command"
	          value="sudo puppet apply ${option.puppet.options} --modulepath=${option.module.path} -e &quot;class { 'devhost': }&quot;" />
	<echo message="apply.command: ${apply.command}" />

	<target name="clean-test-smoke">
		<delete file="build/test-smoke.stdout" />
		<delete file="build/test-smoke.error" />
	</target>

	<target name="test-smoke"
	        depends="build-init, librarian-puppet-update, librarian-puppet-local-deploy"
	        description="Tests the devhost class by starting up a fresh vagrant smoke VM and provisioning with puppet. Tail the test-smoke.stdout and error files in build dir for output.">
		<exec passthru="true"
		      checkreturn="true"
		      returnProperty="test.result"
		      outputProperty="test.output"
		      output="build/test-smoke.stdout"
		      error="build/test-smoke.error"
		      command="vagrant destroy -f smoketest &amp;&amp; vagrant up smoketest" />
		<echo msg="test.output=${test.output}" />
		<echo msg="test.result=${test.result}" />
		<phingcall target="test-check-result">
			<property name="test.result" value="${test.result}" />
		</phingcall>
	</target>

	<target name="bundle-install"
	        depends=""
	        description="Installs the gems decleared in the Gemfile.">
		<exec passthru="true" command="bundle install" />
	</target>

	<target name="test-acceptance"
	        depends="build-init, bundle-install"
	        description="Runs the Beaker acceptance tests. Requires the gems installed by target bundle-install. To see output tail -f build/test-acceptance.stdout">
		<exec passthru="true"
		      checkreturn="true"
		      returnProperty="test.result"
		      outputProperty="test.output"
		      output="build/test-acceptance.stdout"
		      error="build/test-acceptance.error"
		      command="BEAKER_set=ubuntu-server-1404-x64 bundle exec rspec spec/acceptance" />
		<echo msg="test.output=${test.output}" />
		<echo msg="test.result=${test.result}" />
		<phingcall target="test-check-result">
			<property name="test.result" value="${test.result}" />
		</phingcall>
	</target>

	<target name="puppet-apply"
	        depends="build-init, librarian-puppet-update, librarian-puppet-local-deploy"
	        description="Does a puppet apply of the devhost class to the machine that this build script is run from.">
		<exec passthru="false"
		      checkreturn="true"
		      output="build/puppet-apply-devhost-ubuntutrusty.stdout"
		      error="build/puppet-apply-devhost-ubuntutrusty.error"
		      command="${apply.command} " />
	</target>

	<target name="test-parse-logs">
		<exec command="grep 'Error:' build/test-smoke.stdout"
		      outputProperty="grep.stdout.log" />
		<exec command="grep 'Error:' build/test-smoke.error"
		      outputProperty="grep.error.log" />
	</target>

	<target name="test-check-result" depends="test-parse-logs">
		<property name="empty.string" value="" />
		<if>
			<and>
				<equals arg1="${test.result}" arg2="${test.pass.code}" />
				<equals arg1="${grep.error.log}" arg2="${empty.string}" />
				<equals arg1="${grep.stdout.log}" arg2="${empty.string}" />
			</and>
			<then>
				<echo message="Test passed." />
			</then>
			<else>
				<fail message="Test failed with code ${test.result}." />
				<echo msg="grep.stdout.log=${grep.stdout.log}" />
				<echo msg="grep.error.log=${grep.error.log}" />
			</else>
		</if>
	</target>

	<target name="librarian-puppet-update"
	        depends="build-init"
	        description="Runs librarian-puppet update.">
		<exec passthru="true" command="librarian-puppet update --verbose" />
	</target>

	<target name="librarian-puppet-install"
	        unless="modules.exists"
	        depends="build-init"
	        description="Runs librarian-puppet install">
		<exec passthru="true"
		      command="librarian-puppet install --path=modules --verbose" />
	</target>

	<target name="librarian-puppet-local-deploy"
	        description="Copies the local files to the librarian puppet modules folder so we can do standalone provisioning with puppet.">
		<copy todir="modules/${phing.project.name}">
			<fileset defaultexcludes="false" expandsymboliclinks="true" dir=".">
				<include name="files/**" />
				<include name="manifests/**" />
				<include name="specs/**" />
				<include name="tests/**" />
			</fileset>
		</copy>
	</target>


	<!-- Vagrant related targets -->

	<target name="vagrant-rebuild-dev"
	        depends="vagrant-destroy-dev, 
	    vagrant-up-dev"
	        description="Vagrant destroy and up of dev testing machine." />

	<target name="vagrant-destroy-dev"
	        description="Vagrant destroy the dev testing machine.">
		<exec command="vagrant destroy -f dev" passthru="true" />
	</target>

	<target name="vagrant-up-dev"
	        description="Vagrant up the dev testing machine.">
		<exec command="export VAGRANT_LOCAL_TIME=${option.localtime}; vagrant up dev --provider=virtualbox --provision"
		      passthru="true" />
	</target>

	<target name="vagrant-provision-dev"
	        description="Vagrant up the dev testing machine.">
		<exec command="export VAGRANT_LOCAL_TIME=${option.localtime}; vagrant provision dev"
		      passthru="true" />
	</target>

	<target name="vagrant-provision-smoketest"
	        description="Run all provisioners on the vagrant smoketest machine.">
		<exec command="export VAGRANT_LOCAL_TIME=${option.localtime}; vagrant provision smoketest"
		      passthru="true" />
	</target>

	<target name="vagrant-provision-smoketest-puppet"
	        description="Run only the puppet provisioners on the vagrant smoketest machine. Excludes the shell provisioner boostrap tasks.">
		<exec command="export VAGRANT_LOCAL_TIME=${option.localtime}; vagrant provision smoketest --provision-with puppet"
		      passthru="true" />
	</target>

	<target name="vagrant-export-ssh-config"
	        depends="build-init"
	        description="Dumps the vagrant ssh configs to ssh-config file.">
		<exec command="vagrant ssh-config > build/vagrant-ssh"
		      passthru="true" />
	</target>

	<!-- Docker related targets -->

	<target name="docker-inspect"
	        description="Gets the specified attribute value for the specified container. A container id or name must be passed in using option.container.id argument and a formate string e.g. .NetworkSettings.IPAddress using option.inspect.format argument.">
		<exec command="docker inspect --format '{{ ${option.inspect.format} }}' ${option.container.id}"
		      passthru="true" />
	</target>

	<target name="docker-container-ip"
	        description="Gets the IP for the specified container. A container id must be passed in using option.container.id argument.">
		<exec command="docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${option.container.id}"
		      passthru="true" />
	</target>

</project>
